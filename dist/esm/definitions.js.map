{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAUA,MAAM,CAAN,IAAY,cAMX;AAND,WAAY,cAAc;IACxB,iDAA+B,CAAA;IAC/B,+DAA6C,CAAA;IAC7C,iFAA+D,CAAA;IAC/D,yDAAuC,CAAA;IACvC,iDAA+B,CAAA;AACjC,CAAC,EANW,cAAc,KAAd,cAAc,QAMzB","sourcesContent":["import { PluginListenerHandle } from '@capacitor/core';\n\nexport type RecordStatus = 'RECORDING' | 'PAUSED' | 'NOT_RECORDING';\nexport type CanRecordStatus = 'NOT_GRANTED' | 'DISABLED_BY_USER' | RecordingError.DEVICE_NOT_SUPPORTED | 'GRANTED';\nexport type RecordingData = {\n  base64: string;\n  msDuration: number;\n  size: number;\n}\n\nexport enum RecordingError {\n  NOT_RECORDING = 'NOT_RECORDING',\n  DEVICE_NOT_SUPPORTED = 'DEVICE_NOT_SUPPORTED',\n  MISSING_MICROPHONE_PERMISSION = 'MISSING_MICROPHONE_PERMISSION',\n  MICROPHONE_IN_USE = 'MICROPHONE_IN_USE',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n}\n\n\n\nexport interface CapacitorVoiceRecorderPlugin {\n  canRecord(): Promise<{ status: CanRecordStatus }>;\n  requestPermission(): Promise<{ isGranted: true }>;\n  startRecording(): Promise<void>;\n  stopRecording(): Promise<RecordingData>;\n  pauseRecording(): Promise<void>;\n  resumeRecording(): Promise<void>;\n  getCurrentStatus(): Promise<{\n    status: RecordStatus;\n  }>;\n\n  addListener(eventName: 'frequencyData', listenerFunc: (data: {base64: string}) => void): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}\n"]}