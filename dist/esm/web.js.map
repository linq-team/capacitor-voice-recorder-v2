{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { IMediaRecorder} from 'extendable-media-recorder';\nimport {deregister, MediaRecorder, register} from 'extendable-media-recorder';\nimport {connect, disconnect} from 'extendable-media-recorder-wav-encoder';\n\nimport type { CanRecordStatus, CapacitorVoiceRecorderPlugin, RecordingData, RecordStatus } from './definitions';\nimport { RecordingError } from './definitions';\n\nexport class CapacitorVoiceRecorderWeb extends WebPlugin implements CapacitorVoiceRecorderPlugin {\n  private _mediaRecorder?: IMediaRecorder;\n  private _mediaStream?: MediaStream;\n  mimeType: string = 'audio/wav' as const;\n  private _chunks: any[] = [];\n  private _startedRecordingAt?: Date;\n  private _encoder: any;\n\n  constructor() {\n    super();\n  }\n\n  public async canRecord(): Promise<{ status: CanRecordStatus }> {\n    if (!navigator.mediaDevices?.getUserMedia) {\n      return Promise.reject(RecordingError.DEVICE_NOT_SUPPORTED);\n    }\n\n    return navigator.permissions.query({ name: 'microphone' as any }).then((result) => {\n      if (result.state === 'granted') {\n        return { status: 'GRANTED' };\n      } else {\n        return { status: 'NOT_GRANTED' };\n      }\n    });\n  }\n\n  public async requestPermission(): Promise<{ isGranted: true }> {\n    if (!navigator.mediaDevices?.getUserMedia) {\n      return Promise.reject(RecordingError.DEVICE_NOT_SUPPORTED);\n    }\n\n    const hasPermission = await this.canRecord();\n\n    if (hasPermission.status === 'GRANTED') {\n      return { isGranted: true };\n    }\n\n    try {\n      return navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n        stream.getTracks().forEach((track) => track.stop());\n        return { isGranted: true };\n      });\n    } catch (error) {\n      return Promise.reject(RecordingError.MISSING_MICROPHONE_PERMISSION);\n    }\n  }\n\n  public async startRecording(): Promise<void> {\n    if (this._mediaRecorder != null) {\n      return Promise.reject(RecordingError.MICROPHONE_IN_USE);\n    }\n\n    const hasPermission = await this.canRecord();\n\n    if (!hasPermission) {\n      return Promise.reject(RecordingError.MISSING_MICROPHONE_PERMISSION);\n    }\n\n    this._encoder = await connect();\n    await register(this._encoder);\n\n    this._mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    this._mediaRecorder = new MediaRecorder(this._mediaStream, { mimeType: 'audio/wav' });\n\n    this._mediaRecorder.onstart = () => {\n      this._startedRecordingAt = new Date();\n    };\n    const audioContext = new AudioContext();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = 8192;\n    analyser.minDecibels = -90;\n    analyser.maxDecibels = -10;\n    analyser.smoothingTimeConstant = 0;\n\n    const dataArray = new Uint8Array(analyser.fftSize);\n    const source = audioContext.createMediaStreamSource(this._mediaStream);\n    source.connect(analyser);\n\n    this._mediaRecorder.ondataavailable = async (event: any) => {\n      this._chunks.push(event.data);\n\n      analyser.getByteFrequencyData(dataArray);\n      const frequencies = btoa(String.fromCharCode.apply(null, Array.from(dataArray).splice(0, analyser.fftSize)));\n      this.notifyListeners('frequencyData', { base64: frequencies });\n    };\n\n    this._mediaRecorder.onerror = () => {\n      if (!this._mediaRecorder) {\n        return Promise.reject(RecordingError.NOT_RECORDING);\n      }\n\n      this._mediaRecorder.stop();\n      this._prepareInstanceForNextOperation();\n\n      this._startedRecordingAt = undefined;\n      this._mediaStream = undefined;\n      this._mediaRecorder = undefined;\n      this._chunks = [];\n      return Promise.reject(RecordingError.UNKNOWN_ERROR);\n    };\n\n    this._mediaRecorder.start(100);\n  }\n\n  public async stopRecording(): Promise<RecordingData> {\n    if (!this._mediaRecorder) {\n      return Promise.reject(RecordingError.NOT_RECORDING);\n    }\n\n    const mimeType = this.mimeType;\n\n    if (mimeType == null) {\n      return Promise.reject(RecordingError.DEVICE_NOT_SUPPORTED);\n    }\n\n    this._prepareInstanceForNextOperation();\n\n    const blobVoiceRecording = new Blob(this._chunks, { type: mimeType });\n\n    const recordingDuration = new Date().getTime() - this._startedRecordingAt!.getTime();\n\n    this._startedRecordingAt = undefined;\n    this._mediaStream = undefined;\n    this._mediaRecorder = undefined;\n    this._chunks = [];\n    await deregister(this._encoder);\n    await disconnect(this._encoder);\n    this._encoder = undefined;\n\n    return {\n      base64: await this._blobToBase64(blobVoiceRecording),\n      msDuration: recordingDuration,\n      size: blobVoiceRecording.size,\n    };\n  }\n\n  public async pauseRecording(): Promise<void> {\n    if (!this._mediaRecorder) {\n      return Promise.reject(RecordingError.NOT_RECORDING);\n    }\n\n    if (this._mediaRecorder.state === 'recording') {\n      this._mediaRecorder.pause();\n      return;\n    }\n\n    return Promise.reject(RecordingError.NOT_RECORDING);\n  }\n\n  public async resumeRecording(): Promise<void> {\n    if (!this._mediaRecorder) {\n      return Promise.reject(RecordingError.NOT_RECORDING);\n    }\n\n    if (this._mediaRecorder.state === 'paused') {\n      this._mediaRecorder.resume();\n      return;\n    }\n\n    return Promise.reject(RecordingError.NOT_RECORDING);\n  }\n\n  public async getCurrentStatus(): Promise<{ status: RecordStatus }> {\n    if (!this._mediaRecorder) {\n      return Promise.resolve({ status: 'NOT_RECORDING' });\n    }\n\n    if (this._mediaRecorder.state === 'recording') {\n      return Promise.resolve({ status: 'RECORDING' });\n    } else if (this._mediaRecorder.state === 'paused') {\n      return Promise.resolve({ status: 'PAUSED' });\n    } else {\n      return Promise.resolve({ status: 'NOT_RECORDING' });\n    }\n  }\n\n  private _prepareInstanceForNextOperation(): void {\n    if (this._mediaRecorder != null && this._mediaRecorder.state === 'recording') {\n      try {\n        this._mediaRecorder.stop();\n        this._mediaStream!.getTracks().forEach((track) => track.stop());\n      } catch (error) {\n        console.warn('While trying to stop a media recorder, an error was thrown', error);\n      }\n    }\n  }\n\n  private async _blobToBase64(blob: Blob): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const dataUrl = reader.result as string;\n        const base64Data = dataUrl.split(',')[1]; // Extract base64 part\n        resolve(base64Data);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n}\n"]}